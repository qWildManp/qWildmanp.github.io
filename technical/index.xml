<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technicals on Langxuan(Harry) He</title><link>https://qwildmanp.github.io/technical/</link><description>Recent content in Technicals on Langxuan(Harry) He</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://qwildmanp.github.io/technical/index.xml" rel="self" type="application/rss+xml"/><item><title>Procedual Generate Level: Deadly Game</title><link>https://qwildmanp.github.io/technical/work1/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://qwildmanp.github.io/technical/work1/</guid><description>It is a procedural generated map tech approach
Procedual Level Gnertator Level Generation-Prototype
Level Generation-Final
Basic Approach Procedural generated map. the number of rooms in each sub-level is certain, but the selection and arrangement of room types are randomly distributed. I use scriptable file to store the room requirements of each sub-level. The generation process uses scriptable to traverse each sublevel one by one to ensure that the sublevels are generated in order.</description></item><item><title>Traditional Animation : Inverse Kenematic</title><link>https://qwildmanp.github.io/technical/work3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qwildmanp.github.io/technical/work3/</guid><description>&lt;p>&lt;strong>Introduction&lt;/strong>: C++ implmentation of inverse kenematic&lt;/p></description></item></channel></rss>